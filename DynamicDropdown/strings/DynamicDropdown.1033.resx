<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0"/>
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string"/>
              <xsd:attribute name="type" type="xsd:string"/>
              <xsd:attribute name="mimetype" type="xsd:string"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string"/>
              <xsd:attribute name="name" type="xsd:string"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1"/>
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3"/>
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required"/>
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DynamicDropdown_Display" xml:space="preserve">
    <value>Dynamic Dropdown</value>
    <comment/>
  </data>
  <data name="DynamicDropdown_Desc" xml:space="preserve">
    <value>Displays a drop-down control with a list that can be filled based on a query that can depend on the value of other fields.</value>
    <comment/>
  </data>
  <data name="Query_Display" xml:space="preserve">
    <value>Query</value>
    <comment/>
  </data>
  <data name="Query_Desc" xml:space="preserve">
    <value>OData system query options or FetchXML query to retrieve your data.

      Following system query options are supported: $select, $top, $filter, $expand, and $orderby.
      To specify a FetchXML query, use the fetchXml column to specify the query.
      NOTE: You must always use the $select system query option to limit the properties returned for a table record by including a comma-separated list of property names. This is an important performance best practice. If properties aren't specified using $select, all properties will be returned.
      
      You specify the query options starting with ?. You can also specify multiple system query options by using &amp; to separate the query options.

      If any of the following tokens are found, each will be replaced by their respective Value property: ${1}, ${2}, ${3}, ${4}, ${5}
    </value>
    <comment/>
  </data>
  <data name="EntityType_Display" xml:space="preserve">
    <value>Entity Type</value>
    <comment/>
  </data>
  <data name="EntityType_Desc" xml:space="preserve">
    <value>The entity type (table) will be used by the Query to retrieve the list of items displayed in the list.</value>
    <comment/>
  </data>
  <data name="Value_Display" xml:space="preserve">
    <value>Value</value>
    <comment/>
  </data>
  <data name="Value_Desc" xml:space="preserve">
    <value>Value property should be bound to the target field</value>
    <comment/>
  </data>
  <data name="TextField_Display" xml:space="preserve">
    <value>List's Text Field</value>
    <comment/>
  </data>
  <data name="TextField_Desc" xml:space="preserve">
    <value>Choose a field name from the query result to display the list. You can also provide a text pattern to be used. Example: "${title} - ${firstname} ${lastname}"</value>
    <comment/>
  </data>
  <data name="ValueField_Display" xml:space="preserve">
    <value>List's Value Field</value>
    <comment/>
  </data>
  <data name="ValueField_Desc" xml:space="preserve">
    <value>Choose a field from the query result to be used as the value when an item is selected from the list. You can also provide a text pattern to be used. Example: "${title} - ${firstname} ${lastname}"</value>
    <comment/>
  </data>
  <data name="QueryValue1_Display" xml:space="preserve">
    <value>Query Value 1</value>
    <comment/>
  </data>
  <data name="QueryValue1_Desc" xml:space="preserve">
    <value>Value to replace any ${1} token in the query.</value>
    <comment/>
  </data>
  <data name="QueryValue2_Display" xml:space="preserve">
    <value>Query Value 2</value>
    <comment/>
  </data>
  <data name="QueryValue2_Desc" xml:space="preserve">
    <value>Value to replace any ${2} token in the query.</value>
    <comment/>
  </data>
  <data name="QueryValue3_Display" xml:space="preserve">
    <value>Query Value 3</value>
    <comment/>
  </data>
  <data name="QueryValue3_Desc" xml:space="preserve">
    <value>Value to replace any ${3} token in the query.</value>
    <comment/>
  </data>
  <data name="QueryValue4_Display" xml:space="preserve">
    <value>Query Value 4</value>
    <comment/>
  </data>
  <data name="QueryValue4_Desc" xml:space="preserve">
    <value>Value to replace any ${4} token in the query.</value>
    <comment/>
  </data>
  <data name="QueryValue5_Display" xml:space="preserve">
    <value>Query Value 5</value>
    <comment/>
  </data>
  <data name="QueryValue5_Desc" xml:space="preserve">
    <value>Value to replace any ${5} token in the query.</value>
    <comment/>
  </data>
</root>